// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dao "github.com/lengzuo/fundflow/dao"
	mock "github.com/stretchr/testify/mock"
)

// LedgersRepository is an autogenerated mock type for the LedgersRepository type
type LedgersRepository struct {
	mock.Mock
}

// Insert provides a mock function with given fields: ctx, user
func (_m *LedgersRepository) Insert(ctx context.Context, user *dao.LedgersModel) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dao.LedgersModel) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, limit, startingAfter, currency, username
func (_m *LedgersRepository) List(ctx context.Context, limit int, startingAfter string, currency string, username string) ([]dao.TxHistoryModel, bool, error) {
	ret := _m.Called(ctx, limit, startingAfter, currency, username)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []dao.TxHistoryModel
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string, string) ([]dao.TxHistoryModel, bool, error)); ok {
		return rf(ctx, limit, startingAfter, currency, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string, string) []dao.TxHistoryModel); ok {
		r0 = rf(ctx, limit, startingAfter, currency, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dao.TxHistoryModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, string, string) bool); ok {
		r1 = rf(ctx, limit, startingAfter, currency, username)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, string, string, string) error); ok {
		r2 = rf(ctx, limit, startingAfter, currency, username)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewLedgersRepository creates a new instance of LedgersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLedgersRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LedgersRepository {
	mock := &LedgersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
