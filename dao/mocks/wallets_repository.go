// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dao "github.com/lengzuo/fundflow/dao"
	mock "github.com/stretchr/testify/mock"
)

// WalletsRepository is an autogenerated mock type for the WalletsRepository type
type WalletsRepository struct {
	mock.Mock
}

// Balance provides a mock function with given fields: ctx, username, currencies
func (_m *WalletsRepository) Balance(ctx context.Context, username string, currencies []string) ([]dao.WalletsModel, error) {
	ret := _m.Called(ctx, username, currencies)

	if len(ret) == 0 {
		panic("no return value specified for Balance")
	}

	var r0 []dao.WalletsModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) ([]dao.WalletsModel, error)); ok {
		return rf(ctx, username, currencies)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) []dao.WalletsModel); ok {
		r0 = rf(ctx, username, currencies)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dao.WalletsModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, username, currencies)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Deposit provides a mock function with given fields: ctx, username, currency, amount
func (_m *WalletsRepository) Deposit(ctx context.Context, username string, currency string, amount int) error {
	ret := _m.Called(ctx, username, currency, amount)

	if len(ret) == 0 {
		panic("no return value specified for Deposit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) error); ok {
		r0 = rf(ctx, username, currency, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, username, currency
func (_m *WalletsRepository) Get(ctx context.Context, username string, currency string) (*dao.WalletsModel, error) {
	ret := _m.Called(ctx, username, currency)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *dao.WalletsModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*dao.WalletsModel, error)); ok {
		return rf(ctx, username, currency)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *dao.WalletsModel); ok {
		r0 = rf(ctx, username, currency)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.WalletsModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, currency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transfer provides a mock function with given fields: ctx, sender, receiver, currency, amount
func (_m *WalletsRepository) Transfer(ctx context.Context, sender string, receiver string, currency string, amount int) error {
	ret := _m.Called(ctx, sender, receiver, currency, amount)

	if len(ret) == 0 {
		panic("no return value specified for Transfer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int) error); ok {
		r0 = rf(ctx, sender, receiver, currency, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Withdraw provides a mock function with given fields: ctx, username, currency, amount
func (_m *WalletsRepository) Withdraw(ctx context.Context, username string, currency string, amount int) error {
	ret := _m.Called(ctx, username, currency, amount)

	if len(ret) == 0 {
		panic("no return value specified for Withdraw")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) error); ok {
		r0 = rf(ctx, username, currency, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWalletsRepository creates a new instance of WalletsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWalletsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *WalletsRepository {
	mock := &WalletsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
